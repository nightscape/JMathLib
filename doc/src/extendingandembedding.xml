<!-- :xml.root=doc.xml: -->
<part id="embeddingandextending">
    <title >Embedding and Extending <application class="software">JMathLib</application ></title >
    
<chapter id="embedding_general">
        <title>Embedding <application class="software">JMathLib</application ></title >

        <simpara >
            The <application class="software">JMathLib</application > interpreter can be called from other programs which can use it
            to perform it mathematical calculations
        </simpara >
        <simpara >
            The interpreter classes main function is the evaluateExpression function. This takes a
            string containing the expression and returns a string containing the answer.
        </simpara >
        <simpara >
            Currently <application class="software">JMathLib</application > can only be called from other Java programs. (though see accessing 
            <application class="software">JMathLib</application > from Perl.)
        </simpara >

</chapter>
       

<chapter id="embedding_applet"> 
<title>Embedding JMathLib in a java applet</title>

<para>
The following is an example on how to use JMathLib as a java applet. 
The basic java applet is called using the class
<code>jmathlib.ui.applet.JMathLibGUI.class</code>.
</para>

<para>
The following code is an example for usage in mozilla.

<programlisting>
&lt;applet               CODE     = "jmathlib.ui.applet.JMathLibGUI.class"
 CODEBASE = "bin"        ARCHIVE  = "JMathLibSmallApplet.jar"
 WIDTH    = "700"        HEIGHT   = "400"
 ALIGN    = "middle"
 VSPACE   = "0"            HSPACE = "0"     &gt;
&lt;PARAM NAME="startup"   VALUE  = "plot(rand(2,30))"&gt;
&lt;PARAM NAME="fgcolor"   VALUE  = "ff00ff"&gt;
&lt;PARAM NAME="bgcolor"   VALUE  = "f64033"&gt;
&lt;/applet&gt;
</programlisting>
</para>

<para>
There are some parameters in order to configure the applet.
</para>
<para>
Use the parameter <code>startup</code> to specify the first command
which should be executed after the JMathLib applet has been started.
(e.g. <code>&lt;PARAM NAME="startup"   VALUE="plot(rand(2,30))"&gt;</code>
will plot a figure with two rows of random numbers.)
</para>

<para>
Use the parameter <code>fgcolor</code> to specify the forground color
(basically the color of the letters) in JMathLib's workspace. The color
is coded as <code>rgb</code>-values, please use hex-notation 
(e.g. <code>2200ff</code>).
</para>

<para>
Use the parameter <code>bgcolor</code> to specify the background color
 in JMathLib's workspace. The color
is coded as <code>rgb</code>-values, please use hex-notation 
(e.g. <code>2200ff</code>).
</para>
            
</chapter> 

    
    <chapter id="perl">
        <title >Access <application class="software">JMathLib</application > From Perl</title >
        <simpara >
            The tools/perl/MathLib.pm file allows Perl programs to create objects of the <application class="software">JMathLib</application >
            program and access it's functions. Though with the following caveats.
        </simpara >
        <simpara >
            1) The <application class="software">JMathLib</application > modules requires the JVM.pm module (available from CPAN).
        </simpara >
        <simpara >
            2) This module has so far only been successfully installed under Linux
        </simpara >
        <simpara >
            3) Not all of the functionality of <application class="software">JMathLib</application > is available from the module.
        </simpara >
    </chapter>
    
    
    <chapter id="extending">
        <title >Extending <application class="software">JMathLib</application ></title >
        <simpara >
            There are two ways to add add extra functions to the <application class="software">JMathLib</application >. These are:
        </simpara >
        <simpara >1) m files</simpara >
        <simpara >2) External Functions</simpara >

<sect1 id="mFiles">
            <title >m Files</title >
            <simpara >
                M files are script files written in the <application class="software">JMathLib</application > language.
            </simpara >
            
<para>
<programlisting><![CDATA[  
function A = perms (v)
  v = v(:);
  n = length (v);
  if (n == 1)
    A = v;
  else
    B = perms (v(1:n-1));
    Bidx = 1:size (B, 1);
    A = v(n) * ones (prod (2:n), n);
    A(Bidx,1:n-1) = B;
    k = size (B, 1);
    for x = n-1:-1:2
      A(k+Bidx,1:x-1) = B(Bidx,1:x-1);
      A(k+Bidx,x+1:n) = B(Bidx,x:n-1);
      k = k + size (B, 1);
    endfor
    A(k+Bidx,2:n) = B;
  endif
endfunction
]]></programlisting>
</para> 

</sect1>
        
<sect1 id="externalFunctions">
            <title >External Functions</title >
            <simpara >
                These are java class files which descend from the Functions/ExternalFunction
                class file. They must overide the evaluate function.
            </simpara >
            
<para>
<programlisting><![CDATA[       
package MathLib.Functions.General;

import MathLib.Tokens.*;
import MathLib.Functions.ExternalFunction;

/**An external function for computing a mesh of a matrix  */
public class template extends ExternalFunction
{
    /**returns two  matrices 
     * @param operands[0] = x values (e.g. [-2:0.2:2]) 
     * @param operands[1] = y values (e.g. [-2:0.2:2])
     * @return [X,Y] as matrices                                 */
    public OperandToken evaluate(Token[] operands)
    {

        // one operand (e.g. [x,y]=template([-2:0.2:2],[-2:0.2:2]) )
        if (getNArgIn(operands)!=2)
            throwMathLibException("template: number of input arguments != 2");

        // Check number of return arguments
        if (getNoOfLeftHandArguments()!=2)
            throwMathLibException("template: number of output arguments != 2");

        if ( !(operands[0] instanceof NumberToken) ||
             !(operands[0] instanceof NumberToken)   )
            throwMathLibException("template: works only on numbers");

        // get data from arguments
        double[][] x =  ((NumberToken)operands[0]).getValues();
        double[][] y =  ((NumberToken)operands[1]).getValues();

        if ((x.length != 1) ||
            (y.length != 1)    )
            throwMathLibException("template: works only row vectors");

        int sizeX = x[0].length;
        int sizeY = y[0].length;
        
        double[][] X = new double[sizeY][sizeX];
        double[][] Y = new double[sizeY][sizeX];
        
        for (int i=0; i<sizeY; i++)
        {
        	for (int j=0; j<sizeX; j++)
            {
            	X[i][j] = x[0][j];
                Y[i][j] = y[0][i];
            }
        } 

  	OperandToken values[][] = new OperandToken[1][2];
	values[0][0] = new NumberToken(X);
	values[0][1] = new NumberToken(Y);
	return new MatrixToken( values );

    } // end eval
}

/*
@GROUP
General
@SYNTAX
answer = template (value)
@DOC
Returns the sign of value.
@EXAMPLES
SIGN(-10)=-1
SIGN(10)=1
@NOTES
@SEE
template
*/
]]></programlisting>
</para>    
            
            
<para>
<programlisting><![CDATA[  
public int getNoOfLeftHandArguments()
protected int getNArgOut()
protected int getNArgIn(Token[] operands)
public void setNoOfLeftHandArguments(int _number)

public void throwMathLibException(String errorMessage)
public void debugLine(String s)
 
 
RootObject.java
protected final VariableList getVariables()
protected final VariableList getGlobalVariables()
protected final Variable getVariable(String name)
protected final ContextList getContextList()
protected final Interpreter getInterpreter()
public final FunctionManager getFunctionManager()
protected jmathlib.plugins.PluginsManager getPluginsManager()
protected File getWorkingDirectory()
protected void setWorkingDirectory(File _workingDir)
protected jmathlib.core.graphics.GraphicsManager getGraphicsManager()
]]></programlisting>
</para>
            
        </sect1 >                
    </chapter >
</part >

